const stylistic = require('@stylistic/eslint-plugin');

const customizedStylistic = stylistic.configs.customize({
    flat: false,
    indent: 4,
    jsx: false,
});

module.exports = {
    root: true,
    env: {
        node: true,
        es2022: true,
    },
    parser: '@typescript-eslint/parser',
    parserOptions: {
        project: true,
        ecmaVersion: '2022',
        sourceType: 'module',
        ecmaFeatures: {
            impliedStrict: true,
        },
    },
    plugins: [
        '@typescript-eslint',
        'unicorn',
        'sonarjs',
        'prettier',
        'promise',
        'security',
        'security-node',
        'prefer-arrow',
        'regexp',
        '@stylistic',
        'jest-formatting',
    ],
    extends: [
        'plugin:@typescript-eslint/recommended',
        'plugin:prettier/recommended',
        'plugin:@typescript-eslint/recommended-type-checked',
        'plugin:@typescript-eslint/stylistic-type-checked',
        'eslint:recommended',
        'plugin:unicorn/recommended',
        'plugin:prettier/recommended',
        'plugin:sonarjs/recommended',
        'plugin:n/recommended',
        'plugin:promise/recommended',
        'plugin:security/recommended-legacy',
        'plugin:security-node/recommended',
        'plugin:@eslint-community/eslint-comments/recommended',
        'plugin:regexp/recommended',
        'plugin:jest-formatting/strict',
    ],
    rules: {
        '@eslint-community/eslint-comments/no-unused-disable': 'error',
        '@typescript-eslint/array-type': ['error', { default: 'array'}],
        '@typescript-eslint/ban-ts-comment': 'error',
        '@typescript-eslint/interface-name-prefix': 'off',
        '@typescript-eslint/explicit-function-return-type': 'off',
        '@typescript-eslint/explicit-module-boundary-types': 'off',
        '@typescript-eslint/no-explicit-any': 'off',
        '@typescript-eslint/consistent-type-definitions': ['error', 'type'],
        '@typescript-eslint/consistent-type-exports': 'error',
        '@typescript-eslint/consistent-type-imports': 'error',
        '@typescript-eslint/default-param-last': 'error',
        '@typescript-eslint/member-ordering': 'error',
        '@typescript-eslint/method-signature-style': 'error',
        '@typescript-eslint/naming-convention': [
            'error',
            { selector: 'default', format: ['camelCase'] },
            { selector: 'variable', format: ['camelCase', 'UPPER_CASE'] },
            { selector: 'parameter', format: ['camelCase'], leadingUnderscore: 'allow' },
            { selector: 'classProperty', modifiers: ['static', 'readonly'], format: ['UPPER_CASE'], leadingUnderscore: 'allowDouble' },
            { selector: 'objectLiteralProperty', format: ['camelCase'], leadingUnderscore: 'allow' },
            { selector: 'typeLike', format: ['PascalCase'] },
        ],
        '@typescript-eslint/no-base-to-string': ['error', { ignoredTypeNames: ['RegExp', 'boolean'] }],
        '@typescript-eslint/no-confusing-void-expression': ['error', { ignoreArrowShorthand: true }],
        '@typescript-eslint/no-deprecated': 'warn',
        '@typescript-eslint/no-dupe-class-members': 'error',
        '@typescript-eslint/no-dynamic-delete': 'error',
        '@typescript-eslint/no-empty-function': ['error', { allow: ['arrowFunctions'] }],
        '@typescript-eslint/no-floating-promises': ['error', { ignoreIIFE: true }],
        '@typescript-eslint/no-invalid-this': 'error',
        '@typescript-eslint/no-invalid-void-type': 'error',
        '@typescript-eslint/no-loop-func': 'error',
        '@typescript-eslint/no-magic-numbers': ['error', { ignoreReadonlyClassProperties: true, ignoreArrayIndexes: true, enforceConst: true, ignore: [0, 1, -1] }],
        '@typescript-eslint/no-misused-promises': ['error', { checksVoidReturn: false }],
        '@typescript-eslint/no-shadow': 'error',
        '@typescript-eslint/require-array-sort-compare': 'error',
        '@typescript-eslint/strict-boolean-expressions': 'error',
        '@typescript-eslint/switch-exhaustiveness-check': ['error', { allowDefaultCaseForExhaustiveSwitch: false, requireDefaultForNonUnion: true }],
        'unicorn/consistent-function-scoping': 'error',
        'unicorn/no-negated-condition': 'error',
        'unicorn/no-nested-ternary': 'error',
        'unicorn/prefer-switch': 'error',
        'unicorn/string-content': 'error',
        'arrow-body-style': ['error', 'as-needed'],
        'block-scoped-var': 'error',
        'camelcase': 'error',
        'eqeqeq': 'error',
        'prefer-arrow-callback': 'error',
        ...customizedStylistic.rules,
        '@stylistic/arrow-parens': ['error', 'always'],
        '@stylistic/brace-style': ['error', '1tbs'],
        '@stylistic/member-delimiter-style': ['error', { multiline: { delimiter: 'semi' } }],
        '@stylistic/multiline-comment-style': ['error', 'separate-lines'],
        '@stylistic/quote-props': ['error', 'as-needed'],
        '@stylistic/semi': ['error', 'always'],
    },
};
